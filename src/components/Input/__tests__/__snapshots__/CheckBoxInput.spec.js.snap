// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CheckBoxInput /> should render the correct markup 1`] = `
.c0 {
  outline: none;
  margin: 0;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  position: relative;
  background-color: rgba(255,255,255,1);
  border-color: #999999;
  border-radius: 2px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0::-ms-check {
  display: none;
}

.checkbox--large .c0 {
  width: 24px;
  height: 24px;
}

.checkbox--small .c0 {
  width: 16px;
  height: 16px;
}

.c0:active {
  -webkit-transform: scale(0.95,0.95);
  -ms-transform: scale(0.95,0.95);
  transform: scale(0.95,0.95);
}

.c0:before {
  content: "";
  box-sizing: border-box;
  background-color: transparent;
  border-radius: 2px;
  border: 1px solid #999999;
  position: absolute;
  cursor: pointer;
  -webkit-transition: border-width 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  transition: border-width 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  -webkit-transition: border-color 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  transition: border-color 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
}

.checkbox--large .c0:before {
  width: 24px;
  height: 24px;
}

.checkbox--small .c0:before {
  width: 16px;
  height: 16px;
}

.c0:before.checkbox--disabled {
  color: grey;
}

.c0:hover:before {
  border-width: 2px;
  border-color: #026cdf;
}

.c0:focus:before {
  outline: none;
  box-shadow: 0 0 5px 0 #026cdf;
  border-color: #026cdf;
}

.checkbox--small .c0:focus:before {
  width: 16px;
  height: 16px;
}

.checkbox--large .c0:focus:before {
  width: 24px;
  height: 24px;
}

.c0::after {
  content: "";
  box-sizing: border-box;
  -webkit-transform: scale(0.7,0.7);
  -ms-transform: scale(0.7,0.7);
  transform: scale(0.7,0.7);
  border-radius: 2px;
  background-color: #026cdf;
  cursor: pointer;
  -webkit-transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
  transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
}

.checkbox--disabled .c0::after {
  background-color: #999999;
}

.checkbox--small.checkbox__indeterminate .c0::after {
  width: 8px;
  height: 2px;
  -webkit-transform: scale(1,1);
  -ms-transform: scale(1,1);
  transform: scale(1,1);
}

.checkbox--large.checkbox__indeterminate .c0::after {
  width: 12px;
  height: 2px;
  -webkit-transform: scale(1,1);
  -ms-transform: scale(1,1);
  transform: scale(1,1);
}

<input
  checked={false}
  className="c0"
  disabled={false}
  id="genrerockinput"
  name="genre"
  onChange={[Function]}
  size="small"
  type="checkbox"
  value="rock"
/>
`;

exports[`<CheckBoxInput /> should render the correct markup when additional props are passed 1`] = `
.c0 {
  outline: none;
  margin: 0;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  position: relative;
  background-color: rgba(255,255,255,1);
  border-color: #999999;
  border-radius: 2px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0::-ms-check {
  display: none;
}

.checkbox--large .c0 {
  width: 24px;
  height: 24px;
}

.checkbox--small .c0 {
  width: 16px;
  height: 16px;
}

.c0:active {
  -webkit-transform: scale(0.95,0.95);
  -ms-transform: scale(0.95,0.95);
  transform: scale(0.95,0.95);
}

.c0:before {
  content: "";
  box-sizing: border-box;
  background-color: transparent;
  border-radius: 2px;
  border: 1px solid #999999;
  position: absolute;
  cursor: pointer;
  -webkit-transition: border-width 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  transition: border-width 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  -webkit-transition: border-color 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  transition: border-color 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
}

.checkbox--large .c0:before {
  width: 24px;
  height: 24px;
}

.checkbox--small .c0:before {
  width: 16px;
  height: 16px;
}

.c0:before.checkbox--disabled {
  color: grey;
}

.c0:hover:before {
  border-width: 2px;
  border-color: #026cdf;
}

.c0:focus:before {
  outline: none;
  box-shadow: 0 0 5px 0 #026cdf;
  border-color: #026cdf;
}

.checkbox--small .c0:focus:before {
  width: 16px;
  height: 16px;
}

.checkbox--large .c0:focus:before {
  width: 24px;
  height: 24px;
}

.c0::after {
  content: "";
  box-sizing: border-box;
  -webkit-transform: scale(0.7,0.7);
  -ms-transform: scale(0.7,0.7);
  transform: scale(0.7,0.7);
  border-radius: 2px;
  background-color: #026cdf;
  cursor: pointer;
  -webkit-transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
  transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
}

.checkbox--disabled .c0::after {
  background-color: #999999;
}

.checkbox--small.checkbox__indeterminate .c0::after {
  width: 8px;
  height: 2px;
  -webkit-transform: scale(1,1);
  -ms-transform: scale(1,1);
  transform: scale(1,1);
}

.checkbox--large.checkbox__indeterminate .c0::after {
  width: 12px;
  height: 2px;
  -webkit-transform: scale(1,1);
  -ms-transform: scale(1,1);
  transform: scale(1,1);
}

<input
  checked={false}
  className="input--check-box c0"
  disabled={false}
  id="genrerockinput"
  name="genre"
  onChange={[Function]}
  size="small"
  type="checkbox"
  value="rock"
/>
`;

exports[`<CheckBoxInput /> should render the correct markup when isTopAligned 1`] = `
.c0 {
  outline: none;
  margin: 0;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  position: relative;
  background-color: rgba(255,255,255,1);
  border-color: #999999;
  border-radius: 2px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  margin-top: 1px;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0::-ms-check {
  display: none;
}

.checkbox--large .c0 {
  width: 24px;
  height: 24px;
}

.checkbox--small .c0 {
  width: 16px;
  height: 16px;
}

.c0:active {
  -webkit-transform: scale(0.95,0.95);
  -ms-transform: scale(0.95,0.95);
  transform: scale(0.95,0.95);
}

.c0:before {
  content: "";
  box-sizing: border-box;
  background-color: transparent;
  border-radius: 2px;
  border: 1px solid #999999;
  position: absolute;
  cursor: pointer;
  -webkit-transition: border-width 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  transition: border-width 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  -webkit-transition: border-color 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  transition: border-color 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
}

.checkbox--large .c0:before {
  width: 24px;
  height: 24px;
}

.checkbox--small .c0:before {
  width: 16px;
  height: 16px;
}

.c0:before.checkbox--disabled {
  color: grey;
}

.c0:hover:before {
  border-width: 2px;
  border-color: #026cdf;
}

.c0:focus:before {
  outline: none;
  box-shadow: 0 0 5px 0 #026cdf;
  border-color: #026cdf;
}

.checkbox--small .c0:focus:before {
  width: 16px;
  height: 16px;
}

.checkbox--large .c0:focus:before {
  width: 24px;
  height: 24px;
}

.c0::after {
  content: "";
  box-sizing: border-box;
  -webkit-transform: scale(0.7,0.7);
  -ms-transform: scale(0.7,0.7);
  transform: scale(0.7,0.7);
  border-radius: 2px;
  background-color: #026cdf;
  cursor: pointer;
  -webkit-transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
  transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
}

.checkbox--disabled .c0::after {
  background-color: #999999;
}

.checkbox--small.checkbox__indeterminate .c0::after {
  width: 8px;
  height: 2px;
  -webkit-transform: scale(1,1);
  -ms-transform: scale(1,1);
  transform: scale(1,1);
}

.checkbox--large.checkbox__indeterminate .c0::after {
  width: 12px;
  height: 2px;
  -webkit-transform: scale(1,1);
  -ms-transform: scale(1,1);
  transform: scale(1,1);
}

<input
  checked={false}
  className="c0"
  disabled={false}
  id="genrerockinput"
  name="genre"
  onChange={[Function]}
  size="small"
  type="checkbox"
  value="rock"
/>
`;

exports[`<CheckBoxInput /> should render the correct markup when the disabled prop equals true 1`] = `
.c0 {
  outline: none;
  margin: 0;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  position: relative;
  background-color: rgba(255,255,255,1);
  border-color: #999999;
  border-radius: 2px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0::-ms-check {
  display: none;
}

.checkbox--large .c0 {
  width: 24px;
  height: 24px;
}

.checkbox--small .c0 {
  width: 16px;
  height: 16px;
}

.c0:active {
  -webkit-transform: scale(0.95,0.95);
  -ms-transform: scale(0.95,0.95);
  transform: scale(0.95,0.95);
}

.c0:before {
  content: "";
  box-sizing: border-box;
  background-color: transparent;
  border-radius: 2px;
  border: 1px solid #999999;
  position: absolute;
  cursor: pointer;
  -webkit-transition: border-width 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  transition: border-width 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  -webkit-transition: border-color 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  transition: border-color 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
}

.checkbox--large .c0:before {
  width: 24px;
  height: 24px;
}

.checkbox--small .c0:before {
  width: 16px;
  height: 16px;
}

.c0:before.checkbox--disabled {
  color: grey;
}

.c0:hover:before {
  border-width: 2px;
  border-color: #026cdf;
}

.c0:focus:before {
  outline: none;
  box-shadow: 0 0 5px 0 #026cdf;
  border-color: #026cdf;
}

.checkbox--small .c0:focus:before {
  width: 16px;
  height: 16px;
}

.checkbox--large .c0:focus:before {
  width: 24px;
  height: 24px;
}

.c0::after {
  content: "";
  box-sizing: border-box;
  -webkit-transform: scale(0.7,0.7);
  -ms-transform: scale(0.7,0.7);
  transform: scale(0.7,0.7);
  border-radius: 2px;
  background-color: #026cdf;
  cursor: pointer;
  -webkit-transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
  transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
}

.checkbox--disabled .c0::after {
  background-color: #999999;
}

.checkbox--small.checkbox__indeterminate .c0::after {
  width: 8px;
  height: 2px;
  -webkit-transform: scale(1,1);
  -ms-transform: scale(1,1);
  transform: scale(1,1);
}

.checkbox--large.checkbox__indeterminate .c0::after {
  width: 12px;
  height: 2px;
  -webkit-transform: scale(1,1);
  -ms-transform: scale(1,1);
  transform: scale(1,1);
}

<input
  checked={false}
  className="c0"
  disabled={true}
  id="genrerockinput"
  name="genre"
  onChange={[Function]}
  size="small"
  type="checkbox"
  value="rock"
/>
`;

exports[`<CheckBoxInput /> should render the correct markup when the isChecked prop equals true 1`] = `
.c0 {
  outline: none;
  margin: 0;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  position: relative;
  background-color: rgba(255,255,255,1);
  border-color: #999999;
  border-radius: 2px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0::-ms-check {
  display: none;
}

.checkbox--large .c0 {
  width: 24px;
  height: 24px;
}

.checkbox--small .c0 {
  width: 16px;
  height: 16px;
}

.c0:active {
  -webkit-transform: scale(0.95,0.95);
  -ms-transform: scale(0.95,0.95);
  transform: scale(0.95,0.95);
}

.c0:before {
  content: "";
  box-sizing: border-box;
  background-color: transparent;
  border-radius: 2px;
  border: 1px solid #999999;
  position: absolute;
  cursor: pointer;
  -webkit-transition: border-width 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  transition: border-width 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  -webkit-transition: border-color 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  transition: border-color 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
}

.checkbox--large .c0:before {
  width: 24px;
  height: 24px;
}

.checkbox--small .c0:before {
  width: 16px;
  height: 16px;
}

.c0:before.checkbox--disabled {
  color: grey;
}

.c0:hover:before {
  border-width: 2px;
  border-color: #026cdf;
}

.c0:focus:before {
  outline: none;
  box-shadow: 0 0 5px 0 #026cdf;
  border-color: #026cdf;
}

.checkbox--small .c0:focus:before {
  width: 16px;
  height: 16px;
}

.checkbox--large .c0:focus:before {
  width: 24px;
  height: 24px;
}

.c0::after {
  content: "";
  box-sizing: border-box;
  -webkit-transform: scale(0.7,0.7);
  -ms-transform: scale(0.7,0.7);
  transform: scale(0.7,0.7);
  border-radius: 2px;
  background-color: #026cdf;
  cursor: pointer;
  -webkit-transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
  transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
}

.checkbox--disabled .c0::after {
  background-color: #999999;
}

.checkbox--small.checkbox__indeterminate .c0::after {
  width: 8px;
  height: 2px;
  -webkit-transform: scale(1,1);
  -ms-transform: scale(1,1);
  transform: scale(1,1);
}

.checkbox--large.checkbox__indeterminate .c0::after {
  width: 12px;
  height: 2px;
  -webkit-transform: scale(1,1);
  -ms-transform: scale(1,1);
  transform: scale(1,1);
}

<input
  checked={true}
  className="c0"
  disabled={false}
  id="genrerockinput"
  name="genre"
  onChange={[Function]}
  size="small"
  type="checkbox"
  value="rock"
/>
`;

exports[`<CheckBoxInput /> should render the correct markup when the size prop equals large 1`] = `
.c0 {
  outline: none;
  margin: 0;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  position: relative;
  background-color: rgba(255,255,255,1);
  border-color: #999999;
  border-radius: 2px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c0::-ms-check {
  display: none;
}

.checkbox--large .c0 {
  width: 24px;
  height: 24px;
}

.checkbox--small .c0 {
  width: 16px;
  height: 16px;
}

.c0:active {
  -webkit-transform: scale(0.95,0.95);
  -ms-transform: scale(0.95,0.95);
  transform: scale(0.95,0.95);
}

.c0:before {
  content: "";
  box-sizing: border-box;
  background-color: transparent;
  border-radius: 2px;
  border: 1px solid #999999;
  position: absolute;
  cursor: pointer;
  -webkit-transition: border-width 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  transition: border-width 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  -webkit-transition: border-color 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
  transition: border-color 0.3s cubic-bezier(0.455,0.03,0.515,0.955);
}

.checkbox--large .c0:before {
  width: 24px;
  height: 24px;
}

.checkbox--small .c0:before {
  width: 16px;
  height: 16px;
}

.c0:before.checkbox--disabled {
  color: grey;
}

.c0:hover:before {
  border-width: 2px;
  border-color: #026cdf;
}

.c0:focus:before {
  outline: none;
  box-shadow: 0 0 5px 0 #026cdf;
  border-color: #026cdf;
}

.checkbox--small .c0:focus:before {
  width: 16px;
  height: 16px;
}

.checkbox--large .c0:focus:before {
  width: 24px;
  height: 24px;
}

.c0::after {
  content: "";
  box-sizing: border-box;
  -webkit-transform: scale(0.7,0.7);
  -ms-transform: scale(0.7,0.7);
  transform: scale(0.7,0.7);
  border-radius: 2px;
  background-color: #026cdf;
  cursor: pointer;
  -webkit-transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
  transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
}

.checkbox--disabled .c0::after {
  background-color: #999999;
}

.checkbox--small.checkbox__indeterminate .c0::after {
  width: 8px;
  height: 2px;
  -webkit-transform: scale(1,1);
  -ms-transform: scale(1,1);
  transform: scale(1,1);
}

.checkbox--large.checkbox__indeterminate .c0::after {
  width: 12px;
  height: 2px;
  -webkit-transform: scale(1,1);
  -ms-transform: scale(1,1);
  transform: scale(1,1);
}

<input
  checked={false}
  className="c0"
  disabled={false}
  id="genrerockinput"
  name="genre"
  onChange={[Function]}
  size="large"
  type="checkbox"
  value="rock"
/>
`;
